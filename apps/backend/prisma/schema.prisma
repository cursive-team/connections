generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String      @id @default(uuid())
  username              String      @unique
  usernameLowercase     String      @unique
  email                 String      @unique
  signaturePublicKey    String
  encryptionPublicKey   String
  psiPublicKeyLink      String?
  passwordSalt          String
  passwordHash          String
  registrationNumber    Int         @unique @default(autoincrement())
  registeredWithPasskey Boolean
  passkeyAuthPublicKey  String?
  createdAt             DateTime    @default(now())
  notificationUserId    String?
  AuthToken             AuthToken[]
  Backup                Backup[]
}

model SigninToken {
  id                 String   @id @default(uuid())
  email              String
  value              String   @unique
  signinAttemptCount Int      @default(0)
  isUsed             Boolean  @default(false)
  expiresAt          DateTime
  createdAt          DateTime @default(now())
}

model AuthToken {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  value     String    @unique
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())
}

model Backup {
  id                String   @id @default(uuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  backupEntryType   String
  encryptedData     String
  iv                String
  authenticationTag String
  clientCreatedAt   DateTime
  submittedAt       DateTime @default(now())
}

model Message {
  id                                 String   @id @default(uuid())
  receiverSignaturePublicKey         String
  senderEphemeralEncryptionPublicKey String   @unique
  encryptedData                      String
  senderEncryptedSignaturePublicKey  String
  senderEncryptedSignature           String
  createdAt                          DateTime @default(now())
}

model Chip {
  id                       String    @id @default(uuid())
  chipIssuer               String // e.g., "EDGE_CITY_LANNA", "DEVCON_2024"
  chipId                   String    @unique
  chipVariant              String // e.g., "NTAG424", "NTAG212"
  chipIsRegistered         Boolean   @default(false)
  chipRegisteredAt         DateTime?
  chipPublicKey            String?
  chipPrivateKey           String?
  chipTapCount             Int       @default(0)
  ownerUsername            String?
  ownerDisplayName         String?
  ownerBio                 String?
  ownerSignaturePublicKey  String?
  ownerEncryptionPublicKey String?
  ownerPsiPublicKeyLink    String?
  ownerUserData            Json? // Nullable JSONB field
  isLocationChip           Boolean?
  locationId               String?   @unique
  locationName             String?
  locationDescription      String?
  locationData             Json? // Nullable JSONB field
  createdAt                DateTime  @default(now())
}

model LeaderboardEntry {
  id         String   @id @default(uuid())
  username   String
  chipIssuer String
  entryType  String?
  entryValue Decimal?
  tapCount   Int?
  createdAt  DateTime @default(now())
}

model PrivateDataHash {
  id               String   @id @default(uuid())
  username         String
  chipIssuer       String?
  locationId       String?
  dataIdentifier   String // Identifier of the data provided by the client
  encryptedInput   String // Encrypted input
  enclavePublicKey String // Public key of the enclave
  dataHash         String? // Hash of the input concatenated with the secret
  secretHash       String? // Hash of the secret
  createdAt        DateTime @default(now())
}

model DataHashMatch {
  id               String   @id @default(uuid())
  usernameA        String
  usernameB        String
  connectionScore  Decimal
  createdAt        DateTime @default(now())
}
